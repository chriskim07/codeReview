import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Scanner;
import java.util.TreeMap;

public class RunManager {

	private static Scanner scanner;
	public static List<String> list;
	public static TreeMap<String, Integer> treeMap;
	public static TreeMap<String, Integer> zeroMap;

	public static void main(String[] args) {
		
		try {
//			scanner = new Scanner(System.in);
//			String inputId = scanner.next();
//			String inputTime = scanner.next();
//			int inputSec = getSec(inputTime);
			
			String inputId = "001";
			int inputSec = 570;
			
//			String inputId = "004";
//			int inputSec = 930;
			
//			System.out.println("inputId : " + inputId);
//			System.out.println("inputTime : " + inputTime);
//			System.out.println("inputSec : " + inputSec);
			
			list = Files.readAllLines(Paths.get("./INPUT/INPUT.txt"));
			List<String> rList = new ArrayList<String>();
			rList.add(inputId);
			
			/*
			for (int i = 0; i < list.size(); i++) {
				System.out.println(i + " : " + list.get(i) );
			}
			*/
			
			treeMap = new TreeMap<String, Integer>();
			zeroMap = new TreeMap<String, Integer>();
			String result = "";
			effect(inputId, inputSec, rList);
			
			treeMap.putAll(zeroMap);
			for(String key : treeMap.keySet()) {
				int cnt = treeMap.get(key);
				String count = cnt > 9 ? "" + cnt : "0" + cnt;
				result += count + " " + key + "\n";
			}
			System.out.println(result);
			
//			File file = new File("./OUTPUT/CHECK.txt");
//			FileWriter fileWriter = new FileWriter(file);
//			fileWriter.write(result);
//			
//			fileWriter.flush();
//			fileWriter.close();
			
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	public static void effect(String inputId, int inputSec, List<String> lst) {
		List<String> effectList = new ArrayList<String>();
		for (int i = list.size() - 1; i >= 0; i--) {
			String line = list.get(i);
			String[] data = line.split(" ");
			String id = data[0];
			int startTime = getSec(data[1]);
			int endTime = getSec(data[2]);
			if(inputId.equalsIgnoreCase(id)) {
				if(inputSec <= startTime) {
					effectList.add(line);
					list.remove(i);
				}else if(startTime <= inputSec && inputSec <= endTime) {
					String min = inputSec/60 > 9 ? "" + inputSec/60 : "0" + inputSec/60;
					String sec = inputSec%60 > 9 ? "" + inputSec%60 : "0" + inputSec%60;
					String sTime = min + ":" + sec;
					effectList.add(id + " " + sTime + " " + data[2] + " " + data[3]);
					list.remove(i);
				}
			}
		}
		
		TreeMap<String, Integer> eMap = new TreeMap<String, Integer>();
		
		for (int i = 0; i < effectList.size(); i++) {
			String eLine = effectList.get(i);
			String[] eData = eLine.split(" ");
			String id1 = eData[0];
			int startTime1 = getSec(eData[1]);
			int endTime1 = getSec(eData[2]);
			String place1 = eData[3];
			
			for (int j = 0; j < list.size(); j++) {
				String aLine = list.get(j);
				String[] aData = aLine.split(" ");
				String id2 = aData[0];
				int startTime2 = getSec(aData[1]);
				int endTime2 = getSec(aData[2]);
				String place2 = aData[3];
				if(place2.equalsIgnoreCase(place1) && !id2.equalsIgnoreCase(id1) && (Integer.valueOf(id1) <= Integer.valueOf(id2))) {
					if(startTime2 < startTime1 && startTime1 < endTime2) {
//						System.out.println("id:" + id2 + ", time:" + startTime1);
						eMap.put(id2, startTime1);
					} else if (startTime2 < endTime1 && endTime1 < endTime2) {
//						System.out.println("id:" + id2 + ", time:" + startTime2);
						eMap.put(id2, startTime1);
					} else if (startTime1 <= startTime2 && endTime2 <= endTime1) {
//						System.out.println("id:" + id2 + ", time:" + startTime2);
						eMap.put(id2, startTime1);
					} else if (startTime2 <= startTime1 && endTime1 <= endTime2) {
//						System.out.println("id:" + id2 + ", time:" + startTime1);
						eMap.put(id2, startTime1);
					}
				}
				
			}
		}
		
		int cnt = 0;
		if(eMap.size() == 0) {
			zeroMap.put(inputId, 0);
		} else {
			
			for(String key : eMap.keySet()) {
				cnt++;
			}
			
			for (int j = 0; j < lst.size(); j++) {
				String eId = lst.get(j);
				if(treeMap.containsKey(eId)) {
					treeMap.put(eId, treeMap.get(eId) + cnt);
				} else {
					treeMap.put(eId, cnt);
				}
			}
			
			for(String key : eMap.keySet()) {
				List<String> newList = new ArrayList<String>();
				newList.addAll(lst);
				newList.add(key);
				effect(key, eMap.get(key), newList);
			}
			
		}
	}
	
	public static int getSec(String inputTime) {
		int resultSec = Integer.valueOf(inputTime.split(":")[0]) * 60 + Integer.valueOf(inputTime.split(":")[1]);
		return resultSec;
	}

}
